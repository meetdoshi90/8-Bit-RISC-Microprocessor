module alu(
input clk,
input [1:0]grp,
input [2:0]opcode,
input [7:0]operand1,
input [7:0]operand2,
input [7:0]operand3,
input [3:0]flags,
output [7:0]finaloperand,
output [3:0]outflags1);
reg [8:0]result;
reg [8:0] subresult;
reg [8:0] temp;
reg [3:0]outflags;
reg[15:0]shifter;
assign finaloperand=result[7:0];
assign outflags1=outflags;

always@(posedge clk)
begin
outflags=flags;
if(grp==2'b00)
begin
case(opcode)
3'b000:begin//ADD
result=operand2+operand3;
outflags[0]=result[8];
outflags[1]=1'b0;
end

3'b001:begin//ADC
result=operand2+operand3+flags[0];
outflags[0]=result[8];
outflags[1]=1'b0;
end

3'b010:begin//SUB
result=operand2-operand3;
outflags[1]=(operand3>operand2)?1'b1:1'b0;
outflags[0]=1'b0;
end

3'b011:begin//SBB
result=operand2-operand3-flags[1];
if(operand3>operand2) begin
outflags[1]=(operand3>operand2)?1'b1:1'b0;
end
else 
outflags[1]=((operand3==operand2)&&(flags[1]==1'b1))?1'b1:1'b0;
outflags[0]=1'b0;
end

default:result=9'bx;
endcase

outflags[2]=~|result[7:0];
outflags[3]=^result[7:0];
end

if(grp==2'b01)
begin
case(opcode)
3'b000:begin//AND
result=operand2 & operand3;
end

3'b001:begin//OR
result=operand2 | operand3;
end

3'b010:begin//ROR
subresult[8:1]=operand1;
temp=(subresult>>1);
result[6:0]=temp[7:1];
result[7]=temp[0];
end

3'b011:begin//ROL
subresult[7:0]=operand1;
temp=subresult<<1;
result[7:1]=temp[7:1];
result[0]=temp[8];
end

3'b100:begin//SHR
shifter[15:8]=(operand1[7]==1'b1)?8'b11111111:8'b00000000;
shifter[7:0]=operand1[7:0];
result[7:0]=shifter>>1;
end

3'b101:begin//SHL
result=operand1<<1;
end

default:result=9'bx;
endcase
end
end
endmodule
