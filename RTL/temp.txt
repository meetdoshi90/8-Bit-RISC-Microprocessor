//TWO INPUT CLK 25% duty cycle
module processor1(
input IMclk,
input ALUDMclk,
input reset,
output [1:0]insgrp,
output [2:0]insopc,
output RDIM,
output RDDM,
output WRDM,
output reg [23:0]IRX,
output reg [7:0]result1,
output reg [3:0]flagreg,
output [7:0]operands1,
output [7:0]operands2,
output [7:0]operands3,
output [7:0]DM_databus,
output [23:0]IM_insbus,
output [13:0]DM_addbus,
output reg [7:0]PC,
output reg aluclk,
output reg dmclk,
output [3:0]flag,
output [7:0]result,
output RDLOAD,
output RDSTORE,
output ALU,
output ASSIGN,
output MOV,
output BRANCH,
output SPC,
output RSPC,
output SWRESET
//output reg count,
//output reg IMclk,
//output reg ALUDMclk
);

reg [7:0]operands[0:31];
reg [3:0]flagreg1;
reg [7:0]PCR;
reg [7:0]PCS;
reg [7:0]operandstemp;
/*
///////CLOCK GENERATE
always@(posedge clk)
begin
case(count)
1'b0:
begin
IMclk=1'b1;
ALUDMclk=1'b0;
count=1'b1;
end
1'b1:
begin
IMclk=1'b0;
ALUDMclk=1'b1;
count=1'b0;
end
default:count=1'b0;
endcase
end
*/

//INS MEM INSTANTIATION
insmemory in(
.RDIM(RDIM),
.IM_addbus(PC),
.IM_insbus(IM_insbus));

//DATA MEM INSTANTIATION
datamemory da(
.clk(dmclk),
.RDDM(RDDM),
.DM_addbus(DM_addbus),
.WRDM(WRDM),
.DM_databus(DM_databus));

//ALU INSTANTIATION
alu test(
.clk(aluclk),
.grp(insgrp),
.opcode(insopc),
.operand1(operands1),
.operand2(operands2),
.operand3(operands3),
.flags(flagreg),
.finaloperand(result),
.outflags1(flag));


initial 
begin
PCR=8'b0;
operands[0]=8'b00000000;
operands[1]=8'b00000000;
operands[2]=8'b00000000;
operands[3]=8'b00000000;
operands[4]=8'b00000000;
operands[5]=8'b00000000;
operands[6]=8'b00000000;
operands[7]=8'b00000000;
end
////////////////////IM AND ALUDM CLK
always@(posedge IMclk)
begin
if(BRANCH==1'b1)
begin
PC=IRX[7:0];
end
else if(RSPC==1'b1)
begin
PC=PCS;
end
else
PC=PCR;
PCS=(SPC==1'b1)?PC:8'bx;
end

always@(negedge IMclk)
begin
IRX=IM_insbus;
end


always@(posedge ALUDMclk)
begin

aluclk=(ALU==1'b1)?1'b1:1'b0;
dmclk=(WRDM==1'b1)?1'b1:1'b0;


case(IRX[23:19])
5'b00100://INC#
begin
operandstemp=(ASSIGN==1'b1)?(operands[IRX[18:14]]+1'b1):8'bx;
end
5'b00101://DEC#
begin
operandstemp=(ASSIGN==1'b1)?(operands[IRX[18:14]]-1'b1):8'bx;
end
5'b00110://NEG#
begin
operandstemp=(ASSIGN==1'b1)?(~operands[IRX[18:14]]):8'bx;
end
5'b11110://MOV#
begin
operandstemp=(MOV==1'b1)?operands[IRX[13:9]]:1'b0;
end
5'b01110://SETFLAG
begin
flagreg1=(ASSIGN==1'b1)?IRX[3:0]:flagreg1;
end
5'b01111://PUSH FLAG#
begin
operandstemp=(ASSIGN==1'b1)?{4'b0,flagreg}:4'bx;
end
endcase
end

always@(negedge ALUDMclk)
begin
operands[IRX[18:14]]=(aluclk==1'b1)?result:operands[IRX[18:14]];
operands[IRX[18:14]]=((IRX==5'b00100)||(IRX==5'b00101)||(IRX==5'b00110)||(IRX==5'b11110)||(IRX==5'b01111))?operandstemp:operands[IRX[18:14]];
flagreg=(aluclk==1'b1)?flag:flagreg;
flagreg=(IRX[23:19]==5'b01110)?flagreg1:flagreg;
PCR=PC+1'b1;
result1=(aluclk==1'b1)?result:8'b0;
end

assign insgrp=IRX[23:22];
assign insopc=IRX[21:19];
assign RDIM=(reset==1'b0)?1'b1:1'b0;
assign RDDM=(RDLOAD==1'b1)?1'b1:1'b0;
assign WRDM=(RDSTORE==1'b1)?1'b1:1'b0;
assign operands1=(ALU==1'b1)?operands[IRX[18:14]]:8'bz;
assign operands2=(ALU==1'b1)?operands[IRX[13:9]]:8'bz;
assign operands3=(ALU==1'b1)?((IRX[8]==1'b0)?operands[IRX[4:0]]:IRX[7:0]):8'bz;


assign ALU=(((IRX[23:19]==(5'b00000))||(IRX[23:19]==(5'b00001))||(IRX[23:19]==(5'b00010))||(IRX[23:19]==(5'b00011))||(IRX[23:19]==(5'b010x))||(IRX[23:19]==(5'b0110x)))&&(ALUDMclk==1'b1))?1'b1:1'b0;
assign RDLOAD=(IRX[23:19]==5'b11100)?1'b1:1'b0;
assign RDSTORE=(IRX[23:19]==5'b11101)?1'b1:1'b0;
assign ASSIGN=((IRX[23:19]==5'b00100)||(IRX[23:19]==5'b00101)||(IRX[23:19]==5'b00110)||(IRX[23:19]==5'b01110)||(IRX[23:19]==5'b01111))?1'b1:1'b0;
assign DM_addbus=(((RDSTORE==1'b1)&&(WRDM==1'b1))||((RDLOAD==1'b1)&&(RDDM==1'b1)))?IRX[13:0]:14'bz;
assign MOV=(IRX[23:19]==5'b11110)?1'b1:1'b0;
assign BRANCH=(IRX[23:19]==5'b10000)?1'b1:((((IRX[23:19]==5'b10001)&&(flagreg[0]==1'b1))||((IRX[23:19]==5'b10010)&&(flagreg[0]==1'b0))||((IRX[23:19]==5'b10011)&&(flagreg[2]==1'b1))||((IRX[23:19]==5'b10100)&&(flagreg[2]==1'b0))||((IRX[23:19]==5'b10101)&&(flagreg[3]==1'b0))||((IRX[23:19]==5'b10110)&&(flagreg[3]==1'b1)))?1'b1:1'b0);
assign SPC=(IRX[23:19]==5'b11010)?1'b1:1'b0;
assign RSPC=(IRX[23:19]==5'b11011)?1'b1:1'b0;
assign SWRESET=(IRX[23:19]==5'b11000)?1'b1:1'b0;
assign DM_databus=(RDSTORE==1'b1)?operands[IRX[18:14]]:8'bz;
endmodule
